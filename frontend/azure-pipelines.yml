trigger:
- main  # Triggers the pipeline on pushes to the main branch

# 1. USE THE SELF-HOSTED AGENT POOL
pool:
  name: sonarqube  # This must be the name of the pool where your self-hosted agent is registered

variables:
  sonarProjectKey: 'secure-pipeline'  # Must be unique in your SonarQube instance
  sonarProjectName: 'secure-pipeline'
  nodeVersion: '18.x' # Specify your Node.js version
  sonarToken: squ_a3625dda2c771d3a5b1d314b0df32b352283eb17
  dockerfilePath: 'frontend'  # Path to your Dockerfile in the repo
  imageName: 'youssef138/nodejs-frontend'
  tag: '$(Build.BuildId)'  # Using build ID as tag

steps:

# # 2. SET UP NODE.JS
# - task: NodeTool@0
#   inputs:
#     versionSpec: '$(nodeVersion)'
#   displayName: 'Install Node.js'

# # 3. INSTALL PROJECT DEPENDENCIES
# - script: |
#     npm install
#   displayName: 'npm install'
#   workingDirectory: 'frontend'
#   # Using 'npm ci' for clean, reproducible installs in CI environments


# - task: SonarQubePrepare@7
#   displayName: 'SonarQube: Prepare Analysis'
#   inputs:
#     SonarQube: 'sonarqube'
#     scannerMode: 'cli'  # Note: 
#     configMode: 'manual'
#     cliProjectKey: '$(sonarProjectKey)'
#     cliProjectName: '$(sonarProjectName)'
#     cliSources: 'frontend'
#     extraProperties: |
#       sonar.host.url=http://localhost:9000
#       sonar.exclusions=**/node_modules/**, **/coverage/**, **/dist/**

# - script: |
#     echo "Sanitizing SONARQUBE_SCANNER_PARAMS..."
#     export SONARQUBE_SCANNER_PARAMS=$(echo "$SONARQUBE_SCANNER_PARAMS" | sed 's/"sonar.branch.name":"[^"]*",\?//g')
#     echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$SONARQUBE_SCANNER_PARAMS"
#   displayName: 'Remove sonar.branch.name for Community Edition'

# # 6. RUN THE SONARQUBE ANALYSIS
# - task: SonarQubeAnalyze@7
#   inputs:
#     jdkversion: 'JAVA_HOME_17_X64'
#   displayName: 'RUN THE SONARQUBE ANALYSIS'

# # 7. PUBLISH THE ANALYSIS RESULTS TO SONARQUBE SERVER
# - task: SonarQubePublish@7
#   inputs:
#     pollingTimeoutSec: '300'
#   displayName: 'SonarQube: Publish Results'
 

# # 8. THE SAST GATE: CHECK THE QUALITY GATE STATUS
# - task: SonarQubeQualityGateCheck@1
#   inputs:
#     SonarQube: 'sonarqube'
#     ProjectKey: '$(sonarProjectKey)'
#     sonarToken: 'sonarToken'            # ðŸ‘ˆ MUST be the same as in SonarQubePrepare
#     pollingTimeoutSec: '300'
#   displayName: 'SonarQube: Check Quality Gate'

- task: Docker@2
  displayName: 'Login to DockerHub'
  inputs:
    command: login
    containerRegistry: dockerhub  # Name of your DockerHub service connection

- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    repository: $(imageName)
    tags: $(tag)
    dockerfile: $(dockerfilePath)
    buildContext: '.' 


# - script: |
#     cd frontend
#     docker build -t $(imageName):$(tag) .
#   displayName: 'Build Docker image'



# Push Docker image to DockerHub
- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    command: push
    repository: $(imageName)
    tags: $(tag)


# Confirmation message
- script: |
    echo "Successfully built and pushed:"
    echo "$(imageName):$(tag)"
    echo "$(imageName):latest (only on main branch)"
  displayName: 'Build summary'
  
