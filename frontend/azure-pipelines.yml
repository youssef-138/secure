trigger:
- main  # Triggers the pipeline on pushes to the main branch

# 1. USE THE SELF-HOSTED AGENT POOL
pool:
  name: sonarqube  # This must be the name of the pool where your self-hosted agent is registered

variables:
  sonarProjectKey: 'secure-pipeline'  # Must be unique in your SonarQube instance
  sonarProjectName: 'secure-pipeline'
  nodeVersion: '18.x' # Specify your Node.js version

steps:

# 2. SET UP NODE.JS
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# 3. INSTALL PROJECT DEPENDENCIES
- script: |
    npm install
  displayName: 'npm install'
  workingDirectory: '/home/youssef/secure/3tier-nodejs/frontend'
  # Using 'npm ci' for clean, reproducible installs in CI environments

# 4. (Optional) RUN TESTS - Highly Recommended for SonarQube
- script: |
    npm test
    # If your test script runs with coverage, even better.
    # Example with Jest: "jest --coverage --coverageReporters=cobertura"
  displayName: 'Run Tests'
  workingDirectory: '/home/youssef/secure/3tier-nodejs/frontend'
  # If your tests generate a coverage report (e.g., lcov, cobertura),
  # SonarQube can pick it up. You might need to configure the path in extraProperties.

# 5. PREPARE SONARQUBE ANALYSIS CONFIGURATION
- task: SonarQubePrepare@7
  displayName: 'SonarQube: Prepare Analysis'
  inputs:
    SonarQube: 'sonarqube' # Name of your Azure DevOps service connection
    projectKey: '$(sonarProjectKey)'
    projectName: '$(sonarProjectName)'
    # EXTRA PROPERTIES ARE CRUCIAL FOR SELF-HOSTED SETUP
    extraProperties: |
      # Points the scanner to your local SonarQube server
      sonar.host.url=http://localhost:9000
      # Tells SonarQube this is a JavaScript/TypeScript project
      sonar.language=js
      # (Optional) If you want to exclude files like node_modules
      sonar.exclusions=**/node_modules/**, **/coverage/**, **/dist/**
      # (Optional) If your tests generate a coverage report, specify the path here.
      # sonar.javascript.lcov.reportPaths=coverage/lcov.info
      # sonar.testExecutionReportPaths=test-report.xml

# 6. RUN THE SONARQUBE ANALYSIS
- task: SonarQubeAnalyze@7
  displayName: 'SonarQube: Run Analysis'
  # This task executes the sonar-scanner, which collects data and sends it to the server.

# 7. PUBLISH THE ANALYSIS RESULTS TO SONARQUBE SERVER
- task: SonarQubePublish@7
  displayName: 'SonarQube: Publish Results'
  # This task finalizes the analysis and triggers processing on the SonarQube server.
  # The Quality Gate is calculated after this step.

# 8. THE SAST GATE: CHECK THE QUALITY GATE STATUS
- task: SonarQubeQualityGateCheck@1
  displayName: 'SonarQube: Check Quality Gate'
  inputs:
    # Wait for SonarQube server to process the results and compute the gate
    pollingTimeoutSec: '300' # Wait up to 5 minutes
    # This task will FAIL THE BUILD if the Quality Gate fails.
    # This is your SAST gate in action.
